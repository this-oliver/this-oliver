name: Continous Deployment

on:
  push:
    branches:
      - main
    paths-ignore:
      - .github/*
      - .husky/*
      - .commitlintrc
      - .editorconfig
      - docker-compose*.yaml
      - eslint.config.mjs
      - nginx*.conf
      - README.md
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  release:
    runs-on: ubuntu-latest
    # see https://github.com/googleapis/release-please-action/tree/a02a34c4d625f9be7cb89156071d8567266a2445/?tab=readme-ov-file#workflow-permissions
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      tag: ${{ steps.release.outputs.tag_name }}
      released: ${{ steps.release.outputs.releases_created}}
    steps:
      - name: Create release
        if: ${{ github.event_name == 'push'}}
        id: release
        uses: googleapis/release-please-action@a02a34c4d625f9be7cb89156071d8567266a2445 # v4.2.0
        with:
          release-type: node

  build:
    if: ${{ needs.release.outputs.released == 'true' || github.event_name == 'workflow_dispatch' }}
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read # needs write permission to push tag and release
      packages: write # needs write permission to publish Docker image
    strategy:
      matrix:
        app: [frontend, backend]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Login to registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      - name: Build ${{ matrix.app }} container image
        if: ${{ needs.release.outputs.released != 'true' }}
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          push: true
          context: ./src/${{ matrix.app }}
          file: ./src/${{ matrix.app }}/Dockerfile
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/website-${{ matrix.app }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/website-${{ matrix.app }}:latest
          labels: org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          platforms: linux/amd64,linux/arm64

      - name: Build container image for Release
        if: ${{ needs.release.outputs.released == 'true' }}
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          push: true
          context: ./src/${{ matrix.app }}
          file: ./src/${{ matrix.app }}/Dockerfile
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/website-${{ matrix.app }}:${{ needs.release.outputs.tag }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/website-${{ matrix.app }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/website-${{ matrix.app }}:latest
          labels: org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          platforms: linux/amd64,linux/arm64

  deploy:
    if: ${{ needs.release.outputs.released == 'true' || github.event_name == 'workflow_dispatch' }}
    needs: [release, build]
    runs-on: ubuntu-latest
    env:
      environment: dev
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Prepare deployment
        run: |
          echo "Preparing deployment environment..."
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          echo "${{ secrets.DEPLOY_HOST }}" >> ~/.ssh/known_hosts

      - name: Apply k8s resources
        run: |
          # remove existing k8s directory
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -p ${{ secrets.DEPLOY_PORT }} ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} 'rm -rf /tmp/oliverrr-k8s'

          # copy k8s directory to remote
          scp -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -P ${{ secrets.DEPLOY_PORT }} -r deployment/k8s ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:/tmp/oliverrr-k8s

          # apply k8s resources on remote
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -p ${{ secrets.DEPLOY_PORT }} ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
            'cd /tmp/oliverrr-k8s && kubectl apply -k env/${{ env.environment }}/'

          # remove copied k8s directory
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -p ${{ secrets.DEPLOY_PORT }} ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} 'rm -rf /tmp/oliverrr-k8s'
      - name: Update registry secret
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -p ${{ secrets.DEPLOY_PORT }} ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
            "kubectl create secret docker-registry ${{ env.environment }}-oliverrr-regcred \
              --docker-server=ghcr.io \
              --docker-username=${{ secrets.REGISTRY_USER }} \
              --docker-password=${{ secrets.REGISTRY_TOKEN }} \
              --dry-run=client -o yaml | kubectl apply -f -"
      - name: Update backend secrets
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -p ${{ secrets.DEPLOY_PORT }} ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
            "kubectl create secret generic ${{ env.environment }}-oliverrr-backend \
              --from-literal=BACKEND_ADMIN_JWT_SECRET='${{ secrets.BACKEND_ADMIN_JWT_SECRET }}' \
              --from-literal=BACKEND_API_TOKEN_SALT='${{ secrets.BACKEND_API_TOKEN_SALT }}' \
              --from-literal=BACKEND_APP_KEYS='${{ secrets.BACKEND_APP_KEYS }}' \
              --from-literal=BACKEND_JWT_SECRET='${{ secrets.BACKEND_JWT_SECRET }}' \
              --from-literal=BACKEND_ENCRYPTION_KEY='${{ secrets.BACKEND_ENCRYPTION_KEY }}' \
              --from-literal=BACKEND_TRANSFER_TOKEN_SALT='${{ secrets.BACKEND_TRANSFER_TOKEN_SALT }}' \
              --dry-run=client -o yaml | kubectl apply -f -"
      - name: Update frontend secrets
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -p ${{ secrets.DEPLOY_PORT }} ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
            "kubectl create secret generic ${{ env.environment }}-oliverrr-frontend \
              --from-literal=FRONTEND_NUXT_API_TOKEN='${{ secrets.FRONTEND_NUXT_API_TOKEN }}' \
              --dry-run=client -o yaml | kubectl apply -f -"
      - name: Update image tags
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -p ${{ secrets.DEPLOY_PORT }} ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
            "kubectl set image deployment/${{ env.environment }}-oliverrr-frontend frontend=ghcr.io/this-oliver/this-oliver:${{ needs.release.outputs.tag || 'latest' }}"
      - name: Restart deployments
        run: |
          ssh -i ~/.ssh/deploy_key -o StrictHostKeyChecking=no -p ${{ secrets.DEPLOY_PORT }} ${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }} \
            "kubectl rollout restart deployment/${{ env.environment }}-oliverrr-frontend && kubectl rollout restart deployment/${{ env.environment }}-oliverrr-backend"

      - name: cleanup
        if: ${{ always() }}
        run: |
          rm -rf ~/.ssh/deploy_key
          sed -i '/${{ secrets.DEPLOY_HOST }}/d' ~/.ssh/known_hosts
