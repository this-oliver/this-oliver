name: CI/CD

on:
  push:
    branches:
      - main
    paths:
      - package.json
      - 'backend/**'
      - 'frontend/**'
  pull_request:
    branches:
      - main
    paths:
      - package.json
      - 'backend/**'
      - 'frontend/**'

env:
  image: thisoliver/oliverrr
  platforms: linux/amd64,linux/arm64,linux/arm/v7

jobs:
  check-readability:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23

      - name: Install dependencies
        run: npm install

      - name: Lint
        run: npm run lint

  check-unit-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 23

      - name: Setup MongoDB
        uses: supercharge/mongodb-github-action@1.12.0
        with:
          mongodb-version: 6.0.3

      - name: Install dependencies
        run: npm install
        working-directory: packages/backend

      - name: Test
        run: npm test
        working-directory: packages/backend
        env:
          ADMIN_SECRET: TEST_SECRET
          JWT_SECRET: TEST_SECRET
          DB_URI: 'mongodb://localhost:27017/oliverrr-test'

  check-security:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true
      matrix:
        path: [packages/backend, packages/frontend, deploy/k8s, .github/workflows]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: sarif
          output: trivy-results.sarif
          scanners: 'vuln,secret,misconfig'
          severity: 'HIGH,CRITICAL'
          exit-code: 1

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  tag:
    if: ${{ github.event_name == 'push' }}
    needs: [check-readability, check-unit-tests, check-security]
    runs-on: ubuntu-latest

    permissions:
      contents: write # needed to commit changes and push tags

    outputs:
      OLD_VERSION: ${{ steps.current_version.outputs.CURRENT_VERSION }}
      NEW_VERSION: ${{ steps.new_version.outputs.NEW_VERSION }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4

      - name: Get semver type for commit
        id: check_commit
        env:
          KEYWORDS_MAJOR: 'major:|breaking:|release:'
          KEYWORDS_MINOR: 'minor:|feature:'
          KEYWORDS_PATCH: 'patch:|fix:'
          GITHUB_SHA: ${{ github.sha }}
        run: |
          COMMIT_MESSAGE=$(git log --format=%B -n 1 $GITHUB_SHA)

          if [[ $COMMIT_MESSAGE =~ $KEYWORDS_MAJOR ]]; then
            echo "SEMVER_TYPE=major" >> $GITHUB_OUTPUT
          elif [[ $COMMIT_MESSAGE =~ $KEYWORDS_MINOR ]]; then
            echo "SEMVER_TYPE=minor" >> $GITHUB_OUTPUT
          elif [[ $COMMIT_MESSAGE =~ $KEYWORDS_PATCH ]]; then
            echo "SEMVER_TYPE=patch" >> $GITHUB_OUTPUT
          else
            echo "No keywords found in commit message: $COMMIT_MESSAGE"
            echo "Exiting..."
            exit 1
          fi

      - name: Get current tag version
        id: current_version
        run: |
          version=$(git describe --tags --abbrev=0)
          echo "CURRENT_VERSION=$version" >> $GITHUB_OUTPUT
          echo "SEMVER_MAJOR=$(echo $version | cut -d '.' -f 1)" >> $GITHUB_OUTPUT
          echo "SEMVER_MINOR=$(echo $version | cut -d '.' -f 2)" >> $GITHUB_OUTPUT
          echo "SEMVER_PATCH=$(echo $version | cut -d '.' -f 3)" >> $GITHUB_OUTPUT

      - name: Get new version
        id: new_version
        env:
          SEMVER_TYPE: ${{ steps.check_commit.outputs.SEMVER_TYPE }}
          CURRENT_VERSION: ${{ steps.current_version.outputs.CURRENT_VERSION }}
          CURRENT_MAJOR: ${{ steps.current_version.outputs.SEMVER_MAJOR }}
          CURRENT_MINOR: ${{ steps.current_version.outputs.SEMVER_MINOR }}
          CURRENT_PATCH: ${{ steps.current_version.outputs.SEMVER_PATCH }}
        run: |
          major=$CURRENT_MAJOR
          minor=$CURRENT_MINOR
          patch=$CURRENT_PATCH

          if [[ $SEMVER_TYPE == "major" ]]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [[ $SEMVER_TYPE == "minor" ]]; then
            minor=$((minor + 1))
            patch=0
          elif [[ $SEMVER_TYPE == "patch" ]]; then
            patch=$((patch + 1))
          fi

          new_version=$major.$minor.$patch
          if [[ $new_version == $CURRENT_VERSION ]]; then
            echo "❌ New version is the same as the current version: $new_version"
          fi

          echo "NEW_VERSION=$new_version" >> $GITHUB_OUTPUT

      - name: Setup Git
        run: |
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Create tag
        if: ${{ steps.current_version.outputs.CURRENT_VERSION != steps.new_version.outputs.NEW_VERSION }}
        env:
          NEW_VERSION: ${{ steps.new_version.outputs.NEW_VERSION }}
        run: |
          git tag -a $NEW_VERSION -m "Version $NEW_VERSION"
          git push origin $NEW_VERSION

  build:
    # takes too long for PRs
    if: ${{ github.event_name == 'push' && needs.tag.outputs.NEW_VERSION != needs.tag.outputs.OLD_VERSION }}
    needs: [tag]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        package: [backend, frontend]

    steps:
      # get code
      - name: Checkout
        uses: actions/checkout@v4

      # setup quemu to build for multiple architectures
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # builds for multiple architectures and packages them into a single image
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # login to docker hub (use token instead of password)
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # tag and push the image
      - name: Deploy ${{ matrix.package }}
        uses: docker/build-push-action@v5
        with:
          context: packages/${{ matrix.package }}
          tags: '${{ env.image }}:${{ matrix.package }}, ${{ env.image }}:${{ matrix.package }}-${{ needs.tag.outputs.NEW_VERSION }}'
          platforms: ${{ env.platforms }}
          push: true
